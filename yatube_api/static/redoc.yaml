openapi: 3.0.2
info:
  title: Yatube project API documentation
  version: v1
paths:
  /api/v1/posts/:
    get:
      operationId: Getting publications
      description: >-
        Get a list of all publications. When specifying the limit and offset parameters,
        the output must work with pagination.
      parameters:
        - name: limit
          required: false
          in: query
          description: Number of posts per page
          schema:
            type: integer
        - name: offset
          required: false
          in: query
          description: Page number after which to start issuing
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetPost'
              examples:
                Reply with pagination:
                  value:
                    count: 123
                    next: http://api.example.org/accounts/?offset=400&limit=100
                    previous: http://api.example.org/accounts/?offset=200&limit=100
                    results:
                      -
                        id: 0
                        author: string
                        text: string
                        pub_date: 2021-10-14T20:41:29.648Z
                        image: string
                        group: 0            
          description: Successful query execution without pagination
      tags:
        - api
    post:
      operationId: Create a post
      description: >-
        Adding a new publication to the collection of publications. Anonymous requests
        are prohibited.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Obligatory field.
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
      tags:
        - api
  '/api/v1/posts/{id}/':
    get:
      operationId: Get a publication
      description: Getting a publication by id.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: Successful execution of the request
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempted to request a non-existent publication
      tags:
        - api
    put:
      operationId: Publication update
      description: >-
        Updating a post by id. Only the author of the publication can update a publication.
        Anonymous requests are prohibited.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Required field.
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You do not have sufficient rights to perform this action.
          description: Attempt to change someone else's content
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempt to modify a non-existent publication
      tags:
        - api
    patch:
      operationId: Partial update of the publication
      description: >-
        Partial update of the publication by id. Only the author of the publication can 
        update a publication. Anonymous requests are prohibited.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: Successful execution of the request
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You do not have sufficient rights to perform this action.
          description: Attempt to change someone else's content
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempt to modify a non-existent publication
      tags:
        - api
    delete:
      operationId: Deleting a post
      description: >-
        Deleting a post by id. Only the author of the publication can delete a post. 
        Anonymous requests are prohibited.
      parameters:
        - name: id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      responses:
        '204':
          description: Successful execution of the request
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You do not have sufficient rights to perform this action.
          description: Attempt to change someone else's content
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempt to delete a non-existent post
      tags:
        - api
  '/api/v1/posts/{post_id}/comments/':
    get:
      operationId: Receiving comments
      description: Get all comments on a post.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: Successful execution of the request
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    {
                    "detail": "Page not found."
                    }
          description: Getting a list of comments for a non-existent post
      tags:
        - api
    post:
      operationId: Adding a comment
      description: Adding a new comment to a post. Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Required field
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempt to add a comment to a non-existent post
      tags:
        - api
  '/api/v1/posts/{post_id}/comments/{id}/':
    get:
      operationId: Receiving a comment
      description: Getting a comment to a post by id.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Comment id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Successful execution of the request
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: >-
            Attempt to request a non-existent comment or on a non-existent post
      tags:
        - api
    put:
      operationId: Comment update
      description: >-
        Updating a comment on a post by id. Only the author of the comment can 
        update a comment. Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Comment id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    text:
                      - Required field
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You do not have sufficient rights to perform this action.
          description: Attempt to change someone else's content
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: >-
            Attempt to edit a non-existent comment or to a non-existent post
      tags:
        - api
    patch:
      operationId: Partial comment update
      description: >-
        Partial update of the comment to the publication by id. Only the author 
        of the comment can update a comment. Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Comment id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: Successful execution of the request
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You do not have sufficient rights to perform this action.
          description: Attempt to change someone else's content
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: >-
            Attempt to edit a non-existent comment or to a non-existent post
      tags:
        - api
    delete:
      operationId: Deleting a comment
      description: >-
        Deleting a comment on a post by id. Only the author of the comment 
        can update a comment. Anonymous requests are prohibited.
      parameters:
        - name: post_id
          in: path
          required: true
          description: post id
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Comment id
          schema:
            type: integer
      responses:
        '204':
          description: Successful execution of the request
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
        '403':
          content:
            application/json:
              examples:
                '403':
                  value:
                    detail: You do not have sufficient rights to perform this action.
          description: Attempt to change someone else's content
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: >-
            Attempt to delete a non-existent comment or to a non-existent post
      tags:
        - api
  /api/v1/groups/:
    get:
      operationId: List of communities
      description: Getting a list of available communities.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
          description: Successful execution of the request
      tags:
        - api
  '/api/v1/groups/{id}/':
    get:
      operationId: Community information
      description: Getting information about the community by id.
      parameters:
        - name: id
          in: path
          required: true
          description: Community id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Successful execution of the request
        '404':
          content:
            application/json:
              examples:
                '404':
                  value:
                    detail: Page not found.
          description: Attempt to request a non-existent community
      tags:
        - api
  /api/v1/follow/:
    get:
      operationId: Subscriptions
      description: >-
        Returns all subscriptions of the user who made the request. Anonymous requests are prohibited.
      parameters:
        - name: search
          required: false
          in: query
          description: >-
            It is possible to search by subscriptions by the search parameter
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
          description: Successful execution of the request
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
      tags:
        - api
    post:
      operationId: Subscription
      description: >-
        Subscription of the user on whose behalf the request is made for the user 
        passed in the body of the request. Anonymous requests are prohibited.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    following:
                      - Required field
                User does not exist:
                  value:
                    following:
                      - The object with username=... does not exist.
                Subscribe to yourself:
                  value:
                    following:
                      - You can't subscribe to yourself!
          description: >-
            A required field in the request body is missing or does not meet the requirements
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Credentials were not provided.
          description: Request on behalf of an anonymous user
      tags:
        - api
  /api/v1/jwt/create/:
    post:
      operationId: Get a JWT token
      description: Getting a JWT token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    username:
                      - Required field
                    password:
                      - Required field
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: No active account found with the given credentials
          description: The transferred account does not exist
      tags:
        - api
  /api/v1/jwt/refresh/:
    post:
      operationId: Refresh JWT token
      description: Refresh JWT token.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh2'
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    refresh:
                      - Required field
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Token is invalid or expired
                    code: token_not_valid
          description: Invalid token passed
      tags:
        - api
  /api/v1/jwt/verify/:
    post:
      operationId: Check JWT token
      description: JWT token validation.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '200':
          description: Successful execution of the request
        '400':
          content:
            application/json:
              examples:
                '400':
                  value:
                    token:
                      - Required field
          description: Missing required field in request body
        '401':
          content:
            application/json:
              examples:
                '401':
                  value:
                    detail: Token is invalid or expired
                    code: token_not_valid
          description: Invalid token passed
      tags:
        - api
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          title: post id
          readOnly: true
        author:
          type: string
          title: username of the user
          readOnly: true
        text:
          type: string
          title: publication text
        pub_date:
          type: string
          format: date-time
          readOnly: true
        image:
          type: string
          format: binary
          nullable: true
        group:
          type: integer
          title: Community id
          nullable: true
      required:
        - text
    GetPost:
      type: object
      properties:
        id:
          type: integer
          title: post id
          readOnly: true
        author:
          type: string
          title: username of the user
          readOnly: true
        text:
          type: string
          title: publication text
        pub_date:
          type: string
          format: date-time
          readOnly: true
        image:
          type: string
          format: binary
          nullable: true
        group:
          type: integer
          title: Community id
          nullable: true
    Comment:
      type: object
      properties:
        id:
          type: integer
          title: Comment id
          readOnly: true
        author:
          type: string
          title: username of the user
          readOnly: true
        text:
          type: string
          title: comment text
        created:
          type: string
          format: date-time
          readOnly: true
        post:
          type: integer
          title: post id
          readOnly: true
      required:
        - text
    Group:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        slug:
          type: string
          maxLength: 50
          pattern: '^[-a-zA-Z0-9_]+$'
        description:
          type: string
      required:
        - title
        - slug
        - description
    Follow:
      type: object
      properties:
        user:
          type: string
          title: username token owner
          readOnly: true
        following:
          type: string
          title: username
      required:
        - following
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
        - username
        - password
    Token:
      title: Token
      type: object
      properties:
        refresh:
          type: string
          title: refresh token
        access:
          type: string
          title: access token
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
        - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    TokenRefresh2:
      type: object
      properties:
        access:
          type: string
